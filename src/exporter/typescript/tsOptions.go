package typescript

import (
	"fmt"
	"time"

	"github.com/maasasia/donggu/code"
	"github.com/maasasia/donggu/dictionary"
	"github.com/maasasia/donggu/util"
)

type TypescriptBuilderOptions struct{ shortener util.Shortener }

func (t *TypescriptBuilderOptions) SetShortener(shortener util.Shortener) {
	t.shortener = shortener
}

func (t TypescriptBuilderOptions) ArgFormatter() ArgumentFormatter {
	return typescriptArgumentFormatter{}
}

func (t TypescriptBuilderOptions) WriteHeader(builder *code.IndentedCodeBuilder) {
	builder.AppendLines(
		"// Generated with donggu at "+time.Now().UTC().Format(time.RFC3339),
		"// AUTOGENERATED CODE. DO NOT EDIT.",
		"",
		`import { DictionaryFnItem, DictionaryNFnItem } from "../types";`,
		`import { Formatter } from "../util";`,
		`type ResolverFunc = (key: keyof typeof DATA, options: unknown, language?: Language) => string;`,
		"",
	)
}

func (t TypescriptBuilderOptions) WriteEntryType(builder *code.IndentedCodeBuilder, methodName, interfaceName string, entryKey dictionary.EntryKey) {
	if interfaceName == "" {
		builder.AppendLines(fmt.Sprintf("%s: DictionaryNFnItem;", methodName))
	} else {
		builder.AppendLines(fmt.Sprintf("%s: DictionaryFnItem<%s>;", methodName, interfaceName))
	}
}

func (t TypescriptBuilderOptions) WriteEntryImpl(builder *code.IndentedCodeBuilder, methodName, interfaceName string, entryKey dictionary.EntryKey) {
	if interfaceName == "" {
		builder.AppendLines(fmt.Sprintf(`%s(language?: Language) { return this.cb("%s", undefined, language) }`, methodName, t.shortener.Shorten(string(entryKey))))
	} else {
		builder.AppendLines(
			fmt.Sprintf(`%s(param: %s, language?: Language) { return this.cb("%s", param, language) }`,
				methodName, interfaceName, t.shortener.Shorten(string(entryKey))),
		)
	}
}

func (t TypescriptBuilderOptions) WriteEntryData(builder *code.IndentedCodeBuilder, argType, language, templateString string, entry dictionary.Entry) {
	if argType == "" {
		builder.AppendLines(fmt.Sprintf("\"%s\": () => `%s`,", language, templateString))
	} else {
		templateString := entry.ReplacedTemplateValue(language, func(key string, format dictionary.TemplateKeyFormat) string {
			call := typescriptArgumentFormatter{}.Format(key, format)
			return "${" + call + "}"
		})
		builder.AppendLines(fmt.Sprintf("\"%s\": (param: %s) => `%s`,", language, argType, templateString))
	}
}
